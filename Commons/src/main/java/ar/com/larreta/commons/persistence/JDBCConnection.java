package ar.com.larreta.commons.persistence;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import ar.com.larreta.commons.AppObject;

/**
 * Wrapper de connection, para establecer una conexion JDBC pura
 */
public interface JDBCConnection extends Connection, AppObject {

	public Connection getConnection();
	
	public void dropSchema();
	
	public void createSchema();
	
	public void executeSimpleQuery(String query) throws SQLException;
	
	public <T> T unwrap(Class<T> iface) throws SQLException;

	public boolean isWrapperFor(Class<?> iface) throws SQLException;

	public Statement createStatement() throws SQLException;

	public PreparedStatement prepareStatement(String sql) throws SQLException;

	public CallableStatement prepareCall(String sql) throws SQLException;

	public String nativeSQL(String sql) throws SQLException;

	public void setAutoCommit(boolean autoCommit) throws SQLException;

	public boolean getAutoCommit() throws SQLException;

	public void commit() throws SQLException;

	public void rollback() throws SQLException;

	public void close() throws SQLException;

	public boolean isClosed() throws SQLException;

	public DatabaseMetaData getMetaData() throws SQLException;

	public void setReadOnly(boolean readOnly) throws SQLException;

	public boolean isReadOnly() throws SQLException;

	public void setCatalog(String catalog) throws SQLException;

	public String getCatalog() throws SQLException;

	public void setTransactionIsolation(int level) throws SQLException;

	public int getTransactionIsolation() throws SQLException;

	public SQLWarning getWarnings() throws SQLException;

	public void clearWarnings() throws SQLException;

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException;

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException;

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException;

	public Map<String, Class<?>> getTypeMap() throws SQLException;

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException;

	public void setHoldability(int holdability) throws SQLException;

	public int getHoldability() throws SQLException;

	public Savepoint setSavepoint() throws SQLException;

	public Savepoint setSavepoint(String name) throws SQLException;

	public void rollback(Savepoint savepoint) throws SQLException;

	public void releaseSavepoint(Savepoint savepoint) throws SQLException;

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException;

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException;

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException;

	public Clob createClob() throws SQLException;

	public Blob createBlob() throws SQLException;

	public NClob createNClob() throws SQLException;

	public SQLXML createSQLXML() throws SQLException;

	public boolean isValid(int timeout) throws SQLException;

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException;

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException;

	public String getClientInfo(String name) throws SQLException;

	public Properties getClientInfo() throws SQLException;

	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException;

	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException;
	
    /**
     * Runs an SQL script (read in using the Reader parameter) using the
     * connection passed in
     *
     * @param conn
     *            - the connection to use for the script
     * @param reader
     *            - the source of the script
     * @throws SQLException
     *             if any SQL errors occur
     * @throws IOException
     *             if there is an error reading from the Reader
     */
    public void runScript(Reader reader) throws IOException, SQLException;
	
	/**
	 * Genera el dump de la base
	 * @return
	 * @throws IOException
	 */
	public File getDump() throws IOException;

	public void setSchema(String schema) throws SQLException;

	public String getSchema() throws SQLException;

	public void abort(Executor executor) throws SQLException;

	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException;

	public int getNetworkTimeout() throws SQLException;

}
